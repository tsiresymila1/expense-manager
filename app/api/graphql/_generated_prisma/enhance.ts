import { ClassType } from "type-graphql";
import * as tslib from "tslib";
import * as crudResolvers from "./resolvers/crud/resolvers-crud.index";
import * as argsTypes from "./resolvers/crud/args.index";
import * as actionResolvers from "./resolvers/crud/resolvers-actions.index";
import * as relationResolvers from "./resolvers/relations/resolvers.index";
import * as models from "./models";
import * as outputTypes from "./resolvers/outputs";
import * as inputTypes from "./resolvers/inputs";

export type MethodDecoratorOverrideFn = (
  decorators: MethodDecorator[],
) => MethodDecorator[];

const crudResolversMap = {
  User: crudResolvers.UserCrudResolver,
  Expense: crudResolvers.ExpenseCrudResolver,
  Category: crudResolvers.CategoryCrudResolver,
  Session: crudResolvers.SessionCrudResolver,
  Account: crudResolvers.AccountCrudResolver,
  Verification: crudResolvers.VerificationCrudResolver,
  Jwks: crudResolvers.JwksCrudResolver,
  Setting: crudResolvers.SettingCrudResolver,
  ActivityLog: crudResolvers.ActivityLogCrudResolver,
};
const actionResolversMap = {
  User: {
    aggregateUser: actionResolvers.AggregateUserResolver,
    createManyUser: actionResolvers.CreateManyUserResolver,
    createManyAndReturnUser: actionResolvers.CreateManyAndReturnUserResolver,
    createOneUser: actionResolvers.CreateOneUserResolver,
    deleteManyUser: actionResolvers.DeleteManyUserResolver,
    deleteOneUser: actionResolvers.DeleteOneUserResolver,
    findFirstUser: actionResolvers.FindFirstUserResolver,
    findFirstUserOrThrow: actionResolvers.FindFirstUserOrThrowResolver,
    users: actionResolvers.FindManyUserResolver,
    user: actionResolvers.FindUniqueUserResolver,
    getUser: actionResolvers.FindUniqueUserOrThrowResolver,
    groupByUser: actionResolvers.GroupByUserResolver,
    updateManyUser: actionResolvers.UpdateManyUserResolver,
    updateOneUser: actionResolvers.UpdateOneUserResolver,
    upsertOneUser: actionResolvers.UpsertOneUserResolver,
  },
  Expense: {
    aggregateExpense: actionResolvers.AggregateExpenseResolver,
    createManyExpense: actionResolvers.CreateManyExpenseResolver,
    createManyAndReturnExpense:
      actionResolvers.CreateManyAndReturnExpenseResolver,
    createOneExpense: actionResolvers.CreateOneExpenseResolver,
    deleteManyExpense: actionResolvers.DeleteManyExpenseResolver,
    deleteOneExpense: actionResolvers.DeleteOneExpenseResolver,
    findFirstExpense: actionResolvers.FindFirstExpenseResolver,
    findFirstExpenseOrThrow: actionResolvers.FindFirstExpenseOrThrowResolver,
    expenses: actionResolvers.FindManyExpenseResolver,
    expense: actionResolvers.FindUniqueExpenseResolver,
    getExpense: actionResolvers.FindUniqueExpenseOrThrowResolver,
    groupByExpense: actionResolvers.GroupByExpenseResolver,
    updateManyExpense: actionResolvers.UpdateManyExpenseResolver,
    updateOneExpense: actionResolvers.UpdateOneExpenseResolver,
    upsertOneExpense: actionResolvers.UpsertOneExpenseResolver,
  },
  Category: {
    aggregateCategory: actionResolvers.AggregateCategoryResolver,
    createManyCategory: actionResolvers.CreateManyCategoryResolver,
    createManyAndReturnCategory:
      actionResolvers.CreateManyAndReturnCategoryResolver,
    createOneCategory: actionResolvers.CreateOneCategoryResolver,
    deleteManyCategory: actionResolvers.DeleteManyCategoryResolver,
    deleteOneCategory: actionResolvers.DeleteOneCategoryResolver,
    findFirstCategory: actionResolvers.FindFirstCategoryResolver,
    findFirstCategoryOrThrow: actionResolvers.FindFirstCategoryOrThrowResolver,
    categories: actionResolvers.FindManyCategoryResolver,
    category: actionResolvers.FindUniqueCategoryResolver,
    getCategory: actionResolvers.FindUniqueCategoryOrThrowResolver,
    groupByCategory: actionResolvers.GroupByCategoryResolver,
    updateManyCategory: actionResolvers.UpdateManyCategoryResolver,
    updateOneCategory: actionResolvers.UpdateOneCategoryResolver,
    upsertOneCategory: actionResolvers.UpsertOneCategoryResolver,
  },
  Session: {
    aggregateSession: actionResolvers.AggregateSessionResolver,
    createManySession: actionResolvers.CreateManySessionResolver,
    createManyAndReturnSession:
      actionResolvers.CreateManyAndReturnSessionResolver,
    createOneSession: actionResolvers.CreateOneSessionResolver,
    deleteManySession: actionResolvers.DeleteManySessionResolver,
    deleteOneSession: actionResolvers.DeleteOneSessionResolver,
    findFirstSession: actionResolvers.FindFirstSessionResolver,
    findFirstSessionOrThrow: actionResolvers.FindFirstSessionOrThrowResolver,
    sessions: actionResolvers.FindManySessionResolver,
    session: actionResolvers.FindUniqueSessionResolver,
    getSession: actionResolvers.FindUniqueSessionOrThrowResolver,
    groupBySession: actionResolvers.GroupBySessionResolver,
    updateManySession: actionResolvers.UpdateManySessionResolver,
    updateOneSession: actionResolvers.UpdateOneSessionResolver,
    upsertOneSession: actionResolvers.UpsertOneSessionResolver,
  },
  Account: {
    aggregateAccount: actionResolvers.AggregateAccountResolver,
    createManyAccount: actionResolvers.CreateManyAccountResolver,
    createManyAndReturnAccount:
      actionResolvers.CreateManyAndReturnAccountResolver,
    createOneAccount: actionResolvers.CreateOneAccountResolver,
    deleteManyAccount: actionResolvers.DeleteManyAccountResolver,
    deleteOneAccount: actionResolvers.DeleteOneAccountResolver,
    findFirstAccount: actionResolvers.FindFirstAccountResolver,
    findFirstAccountOrThrow: actionResolvers.FindFirstAccountOrThrowResolver,
    accounts: actionResolvers.FindManyAccountResolver,
    account: actionResolvers.FindUniqueAccountResolver,
    getAccount: actionResolvers.FindUniqueAccountOrThrowResolver,
    groupByAccount: actionResolvers.GroupByAccountResolver,
    updateManyAccount: actionResolvers.UpdateManyAccountResolver,
    updateOneAccount: actionResolvers.UpdateOneAccountResolver,
    upsertOneAccount: actionResolvers.UpsertOneAccountResolver,
  },
  Verification: {
    aggregateVerification: actionResolvers.AggregateVerificationResolver,
    createManyVerification: actionResolvers.CreateManyVerificationResolver,
    createManyAndReturnVerification:
      actionResolvers.CreateManyAndReturnVerificationResolver,
    createOneVerification: actionResolvers.CreateOneVerificationResolver,
    deleteManyVerification: actionResolvers.DeleteManyVerificationResolver,
    deleteOneVerification: actionResolvers.DeleteOneVerificationResolver,
    findFirstVerification: actionResolvers.FindFirstVerificationResolver,
    findFirstVerificationOrThrow:
      actionResolvers.FindFirstVerificationOrThrowResolver,
    verifications: actionResolvers.FindManyVerificationResolver,
    verification: actionResolvers.FindUniqueVerificationResolver,
    getVerification: actionResolvers.FindUniqueVerificationOrThrowResolver,
    groupByVerification: actionResolvers.GroupByVerificationResolver,
    updateManyVerification: actionResolvers.UpdateManyVerificationResolver,
    updateOneVerification: actionResolvers.UpdateOneVerificationResolver,
    upsertOneVerification: actionResolvers.UpsertOneVerificationResolver,
  },
  Jwks: {
    aggregateJwks: actionResolvers.AggregateJwksResolver,
    createManyJwks: actionResolvers.CreateManyJwksResolver,
    createManyAndReturnJwks: actionResolvers.CreateManyAndReturnJwksResolver,
    createOneJwks: actionResolvers.CreateOneJwksResolver,
    deleteManyJwks: actionResolvers.DeleteManyJwksResolver,
    deleteOneJwks: actionResolvers.DeleteOneJwksResolver,
    findFirstJwks: actionResolvers.FindFirstJwksResolver,
    findFirstJwksOrThrow: actionResolvers.FindFirstJwksOrThrowResolver,
    findManyJwks: actionResolvers.FindManyJwksResolver,
    findUniqueJwks: actionResolvers.FindUniqueJwksResolver,
    findUniqueJwksOrThrow: actionResolvers.FindUniqueJwksOrThrowResolver,
    groupByJwks: actionResolvers.GroupByJwksResolver,
    updateManyJwks: actionResolvers.UpdateManyJwksResolver,
    updateOneJwks: actionResolvers.UpdateOneJwksResolver,
    upsertOneJwks: actionResolvers.UpsertOneJwksResolver,
  },
  Setting: {
    aggregateSetting: actionResolvers.AggregateSettingResolver,
    createManySetting: actionResolvers.CreateManySettingResolver,
    createManyAndReturnSetting:
      actionResolvers.CreateManyAndReturnSettingResolver,
    createOneSetting: actionResolvers.CreateOneSettingResolver,
    deleteManySetting: actionResolvers.DeleteManySettingResolver,
    deleteOneSetting: actionResolvers.DeleteOneSettingResolver,
    findFirstSetting: actionResolvers.FindFirstSettingResolver,
    findFirstSettingOrThrow: actionResolvers.FindFirstSettingOrThrowResolver,
    settings: actionResolvers.FindManySettingResolver,
    setting: actionResolvers.FindUniqueSettingResolver,
    getSetting: actionResolvers.FindUniqueSettingOrThrowResolver,
    groupBySetting: actionResolvers.GroupBySettingResolver,
    updateManySetting: actionResolvers.UpdateManySettingResolver,
    updateOneSetting: actionResolvers.UpdateOneSettingResolver,
    upsertOneSetting: actionResolvers.UpsertOneSettingResolver,
  },
  ActivityLog: {
    aggregateActivityLog: actionResolvers.AggregateActivityLogResolver,
    createManyActivityLog: actionResolvers.CreateManyActivityLogResolver,
    createManyAndReturnActivityLog:
      actionResolvers.CreateManyAndReturnActivityLogResolver,
    createOneActivityLog: actionResolvers.CreateOneActivityLogResolver,
    deleteManyActivityLog: actionResolvers.DeleteManyActivityLogResolver,
    deleteOneActivityLog: actionResolvers.DeleteOneActivityLogResolver,
    findFirstActivityLog: actionResolvers.FindFirstActivityLogResolver,
    findFirstActivityLogOrThrow:
      actionResolvers.FindFirstActivityLogOrThrowResolver,
    activityLogs: actionResolvers.FindManyActivityLogResolver,
    activityLog: actionResolvers.FindUniqueActivityLogResolver,
    getActivityLog: actionResolvers.FindUniqueActivityLogOrThrowResolver,
    groupByActivityLog: actionResolvers.GroupByActivityLogResolver,
    updateManyActivityLog: actionResolvers.UpdateManyActivityLogResolver,
    updateOneActivityLog: actionResolvers.UpdateOneActivityLogResolver,
    upsertOneActivityLog: actionResolvers.UpsertOneActivityLogResolver,
  },
};
const crudResolversInfo = {
  User: [
    "aggregateUser",
    "createManyUser",
    "createManyAndReturnUser",
    "createOneUser",
    "deleteManyUser",
    "deleteOneUser",
    "findFirstUser",
    "findFirstUserOrThrow",
    "users",
    "user",
    "getUser",
    "groupByUser",
    "updateManyUser",
    "updateOneUser",
    "upsertOneUser",
  ],
  Expense: [
    "aggregateExpense",
    "createManyExpense",
    "createManyAndReturnExpense",
    "createOneExpense",
    "deleteManyExpense",
    "deleteOneExpense",
    "findFirstExpense",
    "findFirstExpenseOrThrow",
    "expenses",
    "expense",
    "getExpense",
    "groupByExpense",
    "updateManyExpense",
    "updateOneExpense",
    "upsertOneExpense",
  ],
  Category: [
    "aggregateCategory",
    "createManyCategory",
    "createManyAndReturnCategory",
    "createOneCategory",
    "deleteManyCategory",
    "deleteOneCategory",
    "findFirstCategory",
    "findFirstCategoryOrThrow",
    "categories",
    "category",
    "getCategory",
    "groupByCategory",
    "updateManyCategory",
    "updateOneCategory",
    "upsertOneCategory",
  ],
  Session: [
    "aggregateSession",
    "createManySession",
    "createManyAndReturnSession",
    "createOneSession",
    "deleteManySession",
    "deleteOneSession",
    "findFirstSession",
    "findFirstSessionOrThrow",
    "sessions",
    "session",
    "getSession",
    "groupBySession",
    "updateManySession",
    "updateOneSession",
    "upsertOneSession",
  ],
  Account: [
    "aggregateAccount",
    "createManyAccount",
    "createManyAndReturnAccount",
    "createOneAccount",
    "deleteManyAccount",
    "deleteOneAccount",
    "findFirstAccount",
    "findFirstAccountOrThrow",
    "accounts",
    "account",
    "getAccount",
    "groupByAccount",
    "updateManyAccount",
    "updateOneAccount",
    "upsertOneAccount",
  ],
  Verification: [
    "aggregateVerification",
    "createManyVerification",
    "createManyAndReturnVerification",
    "createOneVerification",
    "deleteManyVerification",
    "deleteOneVerification",
    "findFirstVerification",
    "findFirstVerificationOrThrow",
    "verifications",
    "verification",
    "getVerification",
    "groupByVerification",
    "updateManyVerification",
    "updateOneVerification",
    "upsertOneVerification",
  ],
  Jwks: [
    "aggregateJwks",
    "createManyJwks",
    "createManyAndReturnJwks",
    "createOneJwks",
    "deleteManyJwks",
    "deleteOneJwks",
    "findFirstJwks",
    "findFirstJwksOrThrow",
    "findManyJwks",
    "findUniqueJwks",
    "findUniqueJwksOrThrow",
    "groupByJwks",
    "updateManyJwks",
    "updateOneJwks",
    "upsertOneJwks",
  ],
  Setting: [
    "aggregateSetting",
    "createManySetting",
    "createManyAndReturnSetting",
    "createOneSetting",
    "deleteManySetting",
    "deleteOneSetting",
    "findFirstSetting",
    "findFirstSettingOrThrow",
    "settings",
    "setting",
    "getSetting",
    "groupBySetting",
    "updateManySetting",
    "updateOneSetting",
    "upsertOneSetting",
  ],
  ActivityLog: [
    "aggregateActivityLog",
    "createManyActivityLog",
    "createManyAndReturnActivityLog",
    "createOneActivityLog",
    "deleteManyActivityLog",
    "deleteOneActivityLog",
    "findFirstActivityLog",
    "findFirstActivityLogOrThrow",
    "activityLogs",
    "activityLog",
    "getActivityLog",
    "groupByActivityLog",
    "updateManyActivityLog",
    "updateOneActivityLog",
    "upsertOneActivityLog",
  ],
};
const argsInfo = {
  AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyUserArgs: ["data", "skipDuplicates"],
  CreateManyAndReturnUserArgs: ["data", "skipDuplicates"],
  CreateOneUserArgs: ["data"],
  DeleteManyUserArgs: ["where"],
  DeleteOneUserArgs: ["where"],
  FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstUserOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueUserArgs: ["where"],
  FindUniqueUserOrThrowArgs: ["where"],
  GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyUserArgs: ["data", "where"],
  UpdateOneUserArgs: ["data", "where"],
  UpsertOneUserArgs: ["where", "create", "update"],
  AggregateExpenseArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyExpenseArgs: ["data", "skipDuplicates"],
  CreateManyAndReturnExpenseArgs: ["data", "skipDuplicates"],
  CreateOneExpenseArgs: ["data"],
  DeleteManyExpenseArgs: ["where"],
  DeleteOneExpenseArgs: ["where"],
  FindFirstExpenseArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstExpenseOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyExpenseArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindUniqueExpenseArgs: ["where"],
  FindUniqueExpenseOrThrowArgs: ["where"],
  GroupByExpenseArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyExpenseArgs: ["data", "where"],
  UpdateOneExpenseArgs: ["data", "where"],
  UpsertOneExpenseArgs: ["where", "create", "update"],
  AggregateCategoryArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyCategoryArgs: ["data", "skipDuplicates"],
  CreateManyAndReturnCategoryArgs: ["data", "skipDuplicates"],
  CreateOneCategoryArgs: ["data"],
  DeleteManyCategoryArgs: ["where"],
  DeleteOneCategoryArgs: ["where"],
  FindFirstCategoryArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstCategoryOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyCategoryArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindUniqueCategoryArgs: ["where"],
  FindUniqueCategoryOrThrowArgs: ["where"],
  GroupByCategoryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyCategoryArgs: ["data", "where"],
  UpdateOneCategoryArgs: ["data", "where"],
  UpsertOneCategoryArgs: ["where", "create", "update"],
  AggregateSessionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManySessionArgs: ["data", "skipDuplicates"],
  CreateManyAndReturnSessionArgs: ["data", "skipDuplicates"],
  CreateOneSessionArgs: ["data"],
  DeleteManySessionArgs: ["where"],
  DeleteOneSessionArgs: ["where"],
  FindFirstSessionArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstSessionOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManySessionArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindUniqueSessionArgs: ["where"],
  FindUniqueSessionOrThrowArgs: ["where"],
  GroupBySessionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManySessionArgs: ["data", "where"],
  UpdateOneSessionArgs: ["data", "where"],
  UpsertOneSessionArgs: ["where", "create", "update"],
  AggregateAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyAccountArgs: ["data", "skipDuplicates"],
  CreateManyAndReturnAccountArgs: ["data", "skipDuplicates"],
  CreateOneAccountArgs: ["data"],
  DeleteManyAccountArgs: ["where"],
  DeleteOneAccountArgs: ["where"],
  FindFirstAccountArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstAccountOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyAccountArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindUniqueAccountArgs: ["where"],
  FindUniqueAccountOrThrowArgs: ["where"],
  GroupByAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyAccountArgs: ["data", "where"],
  UpdateOneAccountArgs: ["data", "where"],
  UpsertOneAccountArgs: ["where", "create", "update"],
  AggregateVerificationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyVerificationArgs: ["data", "skipDuplicates"],
  CreateManyAndReturnVerificationArgs: ["data", "skipDuplicates"],
  CreateOneVerificationArgs: ["data"],
  DeleteManyVerificationArgs: ["where"],
  DeleteOneVerificationArgs: ["where"],
  FindFirstVerificationArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstVerificationOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyVerificationArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindUniqueVerificationArgs: ["where"],
  FindUniqueVerificationOrThrowArgs: ["where"],
  GroupByVerificationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyVerificationArgs: ["data", "where"],
  UpdateOneVerificationArgs: ["data", "where"],
  UpsertOneVerificationArgs: ["where", "create", "update"],
  AggregateJwksArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyJwksArgs: ["data", "skipDuplicates"],
  CreateManyAndReturnJwksArgs: ["data", "skipDuplicates"],
  CreateOneJwksArgs: ["data"],
  DeleteManyJwksArgs: ["where"],
  DeleteOneJwksArgs: ["where"],
  FindFirstJwksArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstJwksOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyJwksArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueJwksArgs: ["where"],
  FindUniqueJwksOrThrowArgs: ["where"],
  GroupByJwksArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyJwksArgs: ["data", "where"],
  UpdateOneJwksArgs: ["data", "where"],
  UpsertOneJwksArgs: ["where", "create", "update"],
  AggregateSettingArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManySettingArgs: ["data", "skipDuplicates"],
  CreateManyAndReturnSettingArgs: ["data", "skipDuplicates"],
  CreateOneSettingArgs: ["data"],
  DeleteManySettingArgs: ["where"],
  DeleteOneSettingArgs: ["where"],
  FindFirstSettingArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstSettingOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManySettingArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindUniqueSettingArgs: ["where"],
  FindUniqueSettingOrThrowArgs: ["where"],
  GroupBySettingArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManySettingArgs: ["data", "where"],
  UpdateOneSettingArgs: ["data", "where"],
  UpsertOneSettingArgs: ["where", "create", "update"],
  AggregateActivityLogArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyActivityLogArgs: ["data", "skipDuplicates"],
  CreateManyAndReturnActivityLogArgs: ["data", "skipDuplicates"],
  CreateOneActivityLogArgs: ["data"],
  DeleteManyActivityLogArgs: ["where"],
  DeleteOneActivityLogArgs: ["where"],
  FindFirstActivityLogArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstActivityLogOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyActivityLogArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindUniqueActivityLogArgs: ["where"],
  FindUniqueActivityLogOrThrowArgs: ["where"],
  GroupByActivityLogArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyActivityLogArgs: ["data", "where"],
  UpdateOneActivityLogArgs: ["data", "where"],
  UpsertOneActivityLogArgs: ["where", "create", "update"],
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<TModel extends ResolverModelNames> =
  keyof (typeof crudResolversMap)[TModel]["prototype"];

export type ResolverActionsConfig<TModel extends ResolverModelNames> = Partial<
  Record<
    ModelResolverActionNames<TModel>,
    MethodDecorator[] | MethodDecoratorOverrideFn
  >
> & {
  _all?: MethodDecorator[];
  _query?: MethodDecorator[];
  _mutation?: MethodDecorator[];
};

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap,
) {
  const mutationOperationPrefixes = [
    "createOne",
    "createMany",
    "createManyAndReturn",
    "deleteOne",
    "updateOne",
    "deleteMany",
    "updateMany",
    "upsertOne",
  ];
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName =
      resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    const allActionsDecorators = resolverActionsConfig._all;
    const resolverActionNames =
      crudResolversInfo[modelName as keyof typeof crudResolversInfo];
    for (const resolverActionName of resolverActionNames) {
      const maybeDecoratorsOrFn = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[] | MethodDecoratorOverrideFn | undefined;
      const isWriteOperation = mutationOperationPrefixes.some((prefix) =>
        resolverActionName.startsWith(prefix),
      );
      const operationKindDecorators = isWriteOperation
        ? resolverActionsConfig._mutation
        : resolverActionsConfig._query;
      const mainDecorators = [
        ...(allActionsDecorators ?? []),
        ...(operationKindDecorators ?? []),
      ];
      let decorators: MethodDecorator[];
      if (typeof maybeDecoratorsOrFn === "function") {
        decorators = maybeDecoratorsOrFn(mainDecorators);
      } else {
        decorators = [...mainDecorators, ...(maybeDecoratorsOrFn ?? [])];
      }
      const actionTarget = (
        actionResolversConfig[
          resolverActionName as keyof typeof actionResolversConfig
        ] as Function
      ).prototype;
      tslib.__decorate(decorators, crudTarget, resolverActionName, null);
      tslib.__decorate(decorators, actionTarget, resolverActionName, null);
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof (typeof argsTypes)[TArgsType]["prototype"],
  number | symbol
>;

type ArgFieldsConfig<TArgsType extends ArgsTypesNames> = FieldsConfig<
  ArgFieldNames<TArgsType>
>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(
  argsTypesEnhanceMap: ArgsTypesEnhanceMap,
) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName =
      argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo],
    );
  }
}

const relationResolversMap = {
  User: relationResolvers.UserRelationsResolver,
  Expense: relationResolvers.ExpenseRelationsResolver,
  Category: relationResolvers.CategoryRelationsResolver,
  Session: relationResolvers.SessionRelationsResolver,
  Account: relationResolvers.AccountRelationsResolver,
  Setting: relationResolvers.SettingRelationsResolver,
  ActivityLog: relationResolvers.ActivityLogRelationsResolver,
};
const relationResolversInfo = {
  User: [
    "expenses",
    "categories",
    "sessions",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  Expense: ["user", "category"],
  Category: ["user", "expenses"],
  Session: ["user"],
  Account: ["user"],
  Setting: ["user"],
  ActivityLog: ["user"],
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<TModel extends RelationResolverModelNames> =
  keyof (typeof relationResolversMap)[TModel]["prototype"];

export type RelationResolverActionsConfig<
  TModel extends RelationResolverModelNames,
> = Partial<
  Record<
    RelationResolverActionNames<TModel>,
    MethodDecorator[] | MethodDecoratorOverrideFn
  >
> & { _all?: MethodDecorator[] };

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap,
) {
  for (const relationResolversEnhanceMapKey of Object.keys(
    relationResolversEnhanceMap,
  )) {
    const modelName =
      relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig =
      relationResolversEnhanceMap[modelName]!;
    const allActionsDecorators = relationResolverActionsConfig._all ?? [];
    const relationResolverActionNames =
      relationResolversInfo[modelName as keyof typeof relationResolversInfo];
    for (const relationResolverActionName of relationResolverActionNames) {
      const maybeDecoratorsOrFn = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[] | MethodDecoratorOverrideFn | undefined;
      let decorators: MethodDecorator[];
      if (typeof maybeDecoratorsOrFn === "function") {
        decorators = maybeDecoratorsOrFn(allActionsDecorators);
      } else {
        decorators = [...allActionsDecorators, ...(maybeDecoratorsOrFn ?? [])];
      }
      tslib.__decorate(
        decorators,
        relationResolverTarget,
        relationResolverActionName,
        null,
      );
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

export type PropertyDecoratorOverrideFn = (
  decorators: PropertyDecorator[],
) => PropertyDecorator[];

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys, PropertyDecorator[] | PropertyDecoratorOverrideFn>
> & { _all?: PropertyDecorator[] };

function applyTypeClassEnhanceConfig<
  TEnhanceConfig extends TypeConfig,
  TType extends object,
>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[],
) {
  if (enhanceConfig.class) {
    tslib.__decorate(enhanceConfig.class, typeClass);
  }
  if (enhanceConfig.fields) {
    const allFieldsDecorators = enhanceConfig.fields._all ?? [];
    for (const typeFieldName of typeFieldNames) {
      const maybeDecoratorsOrFn = enhanceConfig.fields[typeFieldName] as
        | PropertyDecorator[]
        | PropertyDecoratorOverrideFn
        | undefined;
      let decorators: PropertyDecorator[];
      if (typeof maybeDecoratorsOrFn === "function") {
        decorators = maybeDecoratorsOrFn(allFieldsDecorators);
      } else {
        decorators = [...allFieldsDecorators, ...(maybeDecoratorsOrFn ?? [])];
      }
      tslib.__decorate(decorators, typePrototype, typeFieldName, void 0);
    }
  }
}

const modelsInfo = {
  User: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
  ],
  Expense: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
  ],
  Category: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
  ],
  Session: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
  ],
  Account: [
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  Verification: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  Jwks: ["id", "publicKey", "privateKey", "createdAt"],
  Setting: ["id", "key", "value", "userId"],
  ActivityLog: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
  ],
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof (typeof models)[TModel]["prototype"],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<
  ModelFieldNames<TModel>
>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo],
    );
  }
}

const outputsInfo = {
  AggregateUser: ["_count", "_min", "_max"],
  UserGroupBy: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "_count",
    "_min",
    "_max",
  ],
  AggregateExpense: ["_count", "_avg", "_sum", "_min", "_max"],
  ExpenseGroupBy: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateCategory: ["_count", "_min", "_max"],
  CategoryGroupBy: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateSession: ["_count", "_min", "_max"],
  SessionGroupBy: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateAccount: ["_count", "_min", "_max"],
  AccountGroupBy: [
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
    "_count",
    "_min",
    "_max",
  ],
  AggregateVerification: ["_count", "_min", "_max"],
  VerificationGroupBy: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
    "_count",
    "_min",
    "_max",
  ],
  AggregateJwks: ["_count", "_min", "_max"],
  JwksGroupBy: [
    "id",
    "publicKey",
    "privateKey",
    "createdAt",
    "_count",
    "_min",
    "_max",
  ],
  AggregateSetting: ["_count", "_min", "_max"],
  SettingGroupBy: ["id", "key", "value", "userId", "_count", "_min", "_max"],
  AggregateActivityLog: ["_count", "_min", "_max"],
  ActivityLogGroupBy: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
    "_count",
    "_min",
    "_max",
  ],
  AffectedRowsOutput: ["count"],
  UserCount: [
    "expenses",
    "categories",
    "sessions",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  UserCountAggregate: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "_all",
  ],
  UserMinAggregate: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
  ],
  UserMaxAggregate: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
  ],
  ExpenseCountAggregate: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
    "_all",
  ],
  ExpenseAvgAggregate: ["amount"],
  ExpenseSumAggregate: ["amount"],
  ExpenseMinAggregate: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
  ],
  ExpenseMaxAggregate: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
  ],
  CategoryCount: ["expenses"],
  CategoryCountAggregate: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
    "_all",
  ],
  CategoryMinAggregate: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
  ],
  CategoryMaxAggregate: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
  ],
  SessionCountAggregate: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
    "_all",
  ],
  SessionMinAggregate: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
  ],
  SessionMaxAggregate: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
  ],
  AccountCountAggregate: [
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
    "_all",
  ],
  AccountMinAggregate: [
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  AccountMaxAggregate: [
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  VerificationCountAggregate: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
    "_all",
  ],
  VerificationMinAggregate: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  VerificationMaxAggregate: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  JwksCountAggregate: ["id", "publicKey", "privateKey", "createdAt", "_all"],
  JwksMinAggregate: ["id", "publicKey", "privateKey", "createdAt"],
  JwksMaxAggregate: ["id", "publicKey", "privateKey", "createdAt"],
  SettingCountAggregate: ["id", "key", "value", "userId", "_all"],
  SettingMinAggregate: ["id", "key", "value", "userId"],
  SettingMaxAggregate: ["id", "key", "value", "userId"],
  ActivityLogCountAggregate: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
    "_all",
  ],
  ActivityLogMinAggregate: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
  ],
  ActivityLogMaxAggregate: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
  ],
  CreateManyAndReturnUser: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
  ],
  CreateManyAndReturnExpense: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
    "user",
    "category",
  ],
  CreateManyAndReturnCategory: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
    "user",
  ],
  CreateManyAndReturnSession: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
    "user",
  ],
  CreateManyAndReturnAccount: [
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
    "user",
  ],
  CreateManyAndReturnVerification: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  CreateManyAndReturnJwks: ["id", "publicKey", "privateKey", "createdAt"],
  CreateManyAndReturnSetting: ["id", "key", "value", "userId", "user"],
  CreateManyAndReturnActivityLog: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
    "user",
  ],
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof (typeof outputTypes)[TOutput]["prototype"],
  number | symbol
>;

type OutputTypeFieldsConfig<TOutput extends OutputTypesNames> = FieldsConfig<
  OutputTypeFieldNames<TOutput>
>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(
  outputTypesEnhanceMap: OutputTypesEnhanceMap,
) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName =
      outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo],
    );
  }
}

const inputsInfo = {
  UserWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "sessions",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  UserOrderByWithRelationInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "sessions",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  UserWhereUniqueInput: [
    "id",
    "email",
    "AND",
    "OR",
    "NOT",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "sessions",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  UserOrderByWithAggregationInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "_count",
    "_max",
    "_min",
  ],
  UserScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
  ],
  ExpenseWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
    "user",
    "category",
  ],
  ExpenseOrderByWithRelationInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
    "user",
    "category",
  ],
  ExpenseWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
    "user",
    "category",
  ],
  ExpenseOrderByWithAggregationInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  ExpenseScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
  ],
  CategoryWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
    "user",
    "expenses",
  ],
  CategoryOrderByWithRelationInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
    "user",
    "expenses",
  ],
  CategoryWhereUniqueInput: [
    "id",
    "name_userId_value",
    "AND",
    "OR",
    "NOT",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
    "user",
    "expenses",
  ],
  CategoryOrderByWithAggregationInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
    "_count",
    "_max",
    "_min",
  ],
  CategoryScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
  ],
  SessionWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
    "user",
  ],
  SessionOrderByWithRelationInput: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
    "user",
  ],
  SessionWhereUniqueInput: [
    "id",
    "token",
    "AND",
    "OR",
    "NOT",
    "expiresAt",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
    "user",
  ],
  SessionOrderByWithAggregationInput: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
    "_count",
    "_max",
    "_min",
  ],
  SessionScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
  ],
  AccountWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
    "user",
  ],
  AccountOrderByWithRelationInput: [
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
    "user",
  ],
  AccountWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
    "user",
  ],
  AccountOrderByWithAggregationInput: [
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
    "_count",
    "_max",
    "_min",
  ],
  AccountScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  VerificationWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  VerificationOrderByWithRelationInput: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  VerificationWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  VerificationOrderByWithAggregationInput: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
    "_count",
    "_max",
    "_min",
  ],
  VerificationScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  JwksWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "publicKey",
    "privateKey",
    "createdAt",
  ],
  JwksOrderByWithRelationInput: ["id", "publicKey", "privateKey", "createdAt"],
  JwksWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "publicKey",
    "privateKey",
    "createdAt",
  ],
  JwksOrderByWithAggregationInput: [
    "id",
    "publicKey",
    "privateKey",
    "createdAt",
    "_count",
    "_max",
    "_min",
  ],
  JwksScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "publicKey",
    "privateKey",
    "createdAt",
  ],
  SettingWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "key",
    "value",
    "userId",
    "user",
  ],
  SettingOrderByWithRelationInput: ["id", "key", "value", "userId", "user"],
  SettingWhereUniqueInput: [
    "id",
    "key",
    "AND",
    "OR",
    "NOT",
    "value",
    "userId",
    "user",
  ],
  SettingOrderByWithAggregationInput: [
    "id",
    "key",
    "value",
    "userId",
    "_count",
    "_max",
    "_min",
  ],
  SettingScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "key",
    "value",
    "userId",
  ],
  ActivityLogWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
    "user",
  ],
  ActivityLogOrderByWithRelationInput: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
    "user",
  ],
  ActivityLogWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
    "user",
  ],
  ActivityLogOrderByWithAggregationInput: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
    "_count",
    "_max",
    "_min",
  ],
  ActivityLogScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
  ],
  UserCreateInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "sessions",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  UserUpdateInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "sessions",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  UserCreateManyInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
  ],
  UserUpdateManyMutationInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
  ],
  ExpenseCreateInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "user",
    "category",
  ],
  ExpenseUpdateInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "user",
    "category",
  ],
  ExpenseCreateManyInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
  ],
  ExpenseUpdateManyMutationInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
  ],
  CategoryCreateInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "user",
    "expenses",
  ],
  CategoryUpdateInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "user",
    "expenses",
  ],
  CategoryCreateManyInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
  ],
  CategoryUpdateManyMutationInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
  ],
  SessionCreateInput: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "user",
  ],
  SessionUpdateInput: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "user",
  ],
  SessionCreateManyInput: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
  ],
  SessionUpdateManyMutationInput: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
  ],
  AccountCreateInput: [
    "id",
    "accountId",
    "providerId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
    "user",
  ],
  AccountUpdateInput: [
    "id",
    "accountId",
    "providerId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
    "user",
  ],
  AccountCreateManyInput: [
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  AccountUpdateManyMutationInput: [
    "id",
    "accountId",
    "providerId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  VerificationCreateInput: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  VerificationUpdateInput: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  VerificationCreateManyInput: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  VerificationUpdateManyMutationInput: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  JwksCreateInput: ["id", "publicKey", "privateKey", "createdAt"],
  JwksUpdateInput: ["id", "publicKey", "privateKey", "createdAt"],
  JwksCreateManyInput: ["id", "publicKey", "privateKey", "createdAt"],
  JwksUpdateManyMutationInput: ["id", "publicKey", "privateKey", "createdAt"],
  SettingCreateInput: ["id", "key", "value", "user"],
  SettingUpdateInput: ["id", "key", "value", "user"],
  SettingCreateManyInput: ["id", "key", "value", "userId"],
  SettingUpdateManyMutationInput: ["id", "key", "value"],
  ActivityLogCreateInput: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "user",
  ],
  ActivityLogUpdateInput: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "user",
  ],
  ActivityLogCreateManyInput: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
  ],
  ActivityLogUpdateManyMutationInput: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
  ],
  StringFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "mode",
    "not",
  ],
  StringNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "mode",
    "not",
  ],
  BoolFilter: ["equals", "not"],
  DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  ExpenseListRelationFilter: ["every", "some", "none"],
  CategoryListRelationFilter: ["every", "some", "none"],
  SessionListRelationFilter: ["every", "some", "none"],
  AccountListRelationFilter: ["every", "some", "none"],
  SettingListRelationFilter: ["every", "some", "none"],
  ActivityLogListRelationFilter: ["every", "some", "none"],
  SortOrderInput: ["sort", "nulls"],
  ExpenseOrderByRelationAggregateInput: ["_count"],
  CategoryOrderByRelationAggregateInput: ["_count"],
  SessionOrderByRelationAggregateInput: ["_count"],
  AccountOrderByRelationAggregateInput: ["_count"],
  SettingOrderByRelationAggregateInput: ["_count"],
  ActivityLogOrderByRelationAggregateInput: ["_count"],
  UserCountOrderByAggregateInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
  ],
  UserMaxOrderByAggregateInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
  ],
  UserMinOrderByAggregateInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
  ],
  StringWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "mode",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  StringNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "mode",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  DateTimeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  FloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  UserRelationFilter: ["is", "isNot"],
  CategoryRelationFilter: ["is", "isNot"],
  ExpenseCountOrderByAggregateInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
  ],
  ExpenseAvgOrderByAggregateInput: ["amount"],
  ExpenseMaxOrderByAggregateInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
  ],
  ExpenseMinOrderByAggregateInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
  ],
  ExpenseSumOrderByAggregateInput: ["amount"],
  FloatWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  CategoryNameUserIdValueCompoundUniqueInput: ["name", "userId", "value"],
  CategoryCountOrderByAggregateInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
  ],
  CategoryMaxOrderByAggregateInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
  ],
  CategoryMinOrderByAggregateInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
  ],
  SessionCountOrderByAggregateInput: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
  ],
  SessionMaxOrderByAggregateInput: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
  ],
  SessionMinOrderByAggregateInput: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
  ],
  DateTimeNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
  ],
  AccountCountOrderByAggregateInput: [
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  AccountMaxOrderByAggregateInput: [
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  AccountMinOrderByAggregateInput: [
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  DateTimeNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  VerificationCountOrderByAggregateInput: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  VerificationMaxOrderByAggregateInput: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  VerificationMinOrderByAggregateInput: [
    "id",
    "identifier",
    "value",
    "expiresAt",
    "createdAt",
    "updatedAt",
  ],
  JwksCountOrderByAggregateInput: [
    "id",
    "publicKey",
    "privateKey",
    "createdAt",
  ],
  JwksMaxOrderByAggregateInput: ["id", "publicKey", "privateKey", "createdAt"],
  JwksMinOrderByAggregateInput: ["id", "publicKey", "privateKey", "createdAt"],
  SettingCountOrderByAggregateInput: ["id", "key", "value", "userId"],
  SettingMaxOrderByAggregateInput: ["id", "key", "value", "userId"],
  SettingMinOrderByAggregateInput: ["id", "key", "value", "userId"],
  ActivityLogCountOrderByAggregateInput: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
  ],
  ActivityLogMaxOrderByAggregateInput: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
  ],
  ActivityLogMinOrderByAggregateInput: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
  ],
  ExpenseCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  CategoryCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  SessionCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  AccountCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  SettingCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  ActivityLogCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  StringFieldUpdateOperationsInput: ["set"],
  NullableStringFieldUpdateOperationsInput: ["set"],
  BoolFieldUpdateOperationsInput: ["set"],
  DateTimeFieldUpdateOperationsInput: ["set"],
  ExpenseUpdateManyWithoutUserNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CategoryUpdateManyWithoutUserNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  SessionUpdateManyWithoutUserNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  AccountUpdateManyWithoutUserNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  SettingUpdateManyWithoutUserNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ActivityLogUpdateManyWithoutUserNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  UserCreateNestedOneWithoutExpensesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  CategoryCreateNestedOneWithoutExpensesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  FloatFieldUpdateOperationsInput: [
    "set",
    "increment",
    "decrement",
    "multiply",
    "divide",
  ],
  UserUpdateOneRequiredWithoutExpensesNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  CategoryUpdateOneRequiredWithoutExpensesNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutCategoriesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  ExpenseCreateNestedManyWithoutCategoryInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  UserUpdateOneRequiredWithoutCategoriesNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ExpenseUpdateManyWithoutCategoryNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  UserCreateNestedOneWithoutSessionsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserUpdateOneRequiredWithoutSessionsNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutAccountsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  NullableDateTimeFieldUpdateOperationsInput: ["set"],
  UserUpdateOneRequiredWithoutAccountsNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutSettingInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserUpdateOneRequiredWithoutSettingNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutActivityLogsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserUpdateOneRequiredWithoutActivityLogsNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  NestedStringFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
  ],
  NestedStringNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
  ],
  NestedBoolFilter: ["equals", "not"],
  NestedDateTimeFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
  ],
  NestedStringWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedIntNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
  ],
  NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedDateTimeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedFloatWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  NestedDateTimeNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
  ],
  NestedDateTimeNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  ExpenseCreateWithoutUserInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "category",
  ],
  ExpenseCreateOrConnectWithoutUserInput: ["where", "create"],
  ExpenseCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  CategoryCreateWithoutUserInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "expenses",
  ],
  CategoryCreateOrConnectWithoutUserInput: ["where", "create"],
  CategoryCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  SessionCreateWithoutUserInput: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
  ],
  SessionCreateOrConnectWithoutUserInput: ["where", "create"],
  SessionCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  AccountCreateWithoutUserInput: [
    "id",
    "accountId",
    "providerId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  AccountCreateOrConnectWithoutUserInput: ["where", "create"],
  AccountCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  SettingCreateWithoutUserInput: ["id", "key", "value"],
  SettingCreateOrConnectWithoutUserInput: ["where", "create"],
  SettingCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  ActivityLogCreateWithoutUserInput: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
  ],
  ActivityLogCreateOrConnectWithoutUserInput: ["where", "create"],
  ActivityLogCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  ExpenseUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  ExpenseUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  ExpenseUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  ExpenseScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
    "categoryId",
  ],
  CategoryUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  CategoryUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  CategoryUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  CategoryScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "userId",
  ],
  SessionUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  SessionUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  SessionUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  SessionScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
    "userId",
  ],
  AccountUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  AccountUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  AccountUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  AccountScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "accountId",
    "providerId",
    "userId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  SettingUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  SettingUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  SettingUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  SettingScalarWhereInput: ["AND", "OR", "NOT", "id", "key", "value", "userId"],
  ActivityLogUpsertWithWhereUniqueWithoutUserInput: [
    "where",
    "update",
    "create",
  ],
  ActivityLogUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  ActivityLogUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  ActivityLogScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
    "userId",
  ],
  UserCreateWithoutExpensesInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "categories",
    "sessions",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  UserCreateOrConnectWithoutExpensesInput: ["where", "create"],
  CategoryCreateWithoutExpensesInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "user",
  ],
  CategoryCreateOrConnectWithoutExpensesInput: ["where", "create"],
  UserUpsertWithoutExpensesInput: ["update", "create", "where"],
  UserUpdateToOneWithWhereWithoutExpensesInput: ["where", "data"],
  UserUpdateWithoutExpensesInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "categories",
    "sessions",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  CategoryUpsertWithoutExpensesInput: ["update", "create", "where"],
  CategoryUpdateToOneWithWhereWithoutExpensesInput: ["where", "data"],
  CategoryUpdateWithoutExpensesInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "user",
  ],
  UserCreateWithoutCategoriesInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "sessions",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  UserCreateOrConnectWithoutCategoriesInput: ["where", "create"],
  ExpenseCreateWithoutCategoryInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "user",
  ],
  ExpenseCreateOrConnectWithoutCategoryInput: ["where", "create"],
  ExpenseCreateManyCategoryInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutCategoriesInput: ["update", "create", "where"],
  UserUpdateToOneWithWhereWithoutCategoriesInput: ["where", "data"],
  UserUpdateWithoutCategoriesInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "sessions",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  ExpenseUpsertWithWhereUniqueWithoutCategoryInput: [
    "where",
    "update",
    "create",
  ],
  ExpenseUpdateWithWhereUniqueWithoutCategoryInput: ["where", "data"],
  ExpenseUpdateManyWithWhereWithoutCategoryInput: ["where", "data"],
  UserCreateWithoutSessionsInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  UserCreateOrConnectWithoutSessionsInput: ["where", "create"],
  UserUpsertWithoutSessionsInput: ["update", "create", "where"],
  UserUpdateToOneWithWhereWithoutSessionsInput: ["where", "data"],
  UserUpdateWithoutSessionsInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "accounts",
    "Setting",
    "activityLogs",
  ],
  UserCreateWithoutAccountsInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "sessions",
    "Setting",
    "activityLogs",
  ],
  UserCreateOrConnectWithoutAccountsInput: ["where", "create"],
  UserUpsertWithoutAccountsInput: ["update", "create", "where"],
  UserUpdateToOneWithWhereWithoutAccountsInput: ["where", "data"],
  UserUpdateWithoutAccountsInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "sessions",
    "Setting",
    "activityLogs",
  ],
  UserCreateWithoutSettingInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "sessions",
    "accounts",
    "activityLogs",
  ],
  UserCreateOrConnectWithoutSettingInput: ["where", "create"],
  UserUpsertWithoutSettingInput: ["update", "create", "where"],
  UserUpdateToOneWithWhereWithoutSettingInput: ["where", "data"],
  UserUpdateWithoutSettingInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "sessions",
    "accounts",
    "activityLogs",
  ],
  UserCreateWithoutActivityLogsInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "sessions",
    "accounts",
    "Setting",
  ],
  UserCreateOrConnectWithoutActivityLogsInput: ["where", "create"],
  UserUpsertWithoutActivityLogsInput: ["update", "create", "where"],
  UserUpdateToOneWithWhereWithoutActivityLogsInput: ["where", "data"],
  UserUpdateWithoutActivityLogsInput: [
    "id",
    "email",
    "name",
    "emailVerified",
    "image",
    "createdAt",
    "updatedAt",
    "expenses",
    "categories",
    "sessions",
    "accounts",
    "Setting",
  ],
  ExpenseCreateManyUserInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "categoryId",
  ],
  CategoryCreateManyUserInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
  ],
  SessionCreateManyUserInput: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
  ],
  AccountCreateManyUserInput: [
    "id",
    "accountId",
    "providerId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  SettingCreateManyUserInput: ["id", "key", "value"],
  ActivityLogCreateManyUserInput: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
  ],
  ExpenseUpdateWithoutUserInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "category",
  ],
  CategoryUpdateWithoutUserInput: [
    "id",
    "name",
    "color",
    "value",
    "description",
    "createdAt",
    "updatedAt",
    "expenses",
  ],
  SessionUpdateWithoutUserInput: [
    "id",
    "expiresAt",
    "token",
    "createdAt",
    "updatedAt",
    "ipAddress",
    "userAgent",
  ],
  AccountUpdateWithoutUserInput: [
    "id",
    "accountId",
    "providerId",
    "accessToken",
    "refreshToken",
    "idToken",
    "accessTokenExpiresAt",
    "refreshTokenExpiresAt",
    "scope",
    "password",
    "createdAt",
    "updatedAt",
  ],
  SettingUpdateWithoutUserInput: ["id", "key", "value"],
  ActivityLogUpdateWithoutUserInput: [
    "id",
    "action",
    "description",
    "ipAddress",
    "userAgent",
    "createdAt",
  ],
  ExpenseCreateManyCategoryInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "userId",
  ],
  ExpenseUpdateWithoutCategoryInput: [
    "id",
    "amount",
    "description",
    "notes",
    "payment",
    "date",
    "createdAt",
    "updatedAt",
    "user",
  ],
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof (typeof inputTypes)[TInput]["prototype"],
  number | symbol
>;

type InputTypeFieldsConfig<TInput extends InputTypesNames> = FieldsConfig<
  InputTypeFieldNames<TInput>
>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(
  inputTypesEnhanceMap: InputTypesEnhanceMap,
) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName =
      inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo],
    );
  }
}
